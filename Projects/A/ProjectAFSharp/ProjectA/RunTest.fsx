// Generated test data for LinAlgDat Project A
// Seed: 877
// Date of creation: 04/04/2022

module testData
open ProjectA
open TestProjectA
open LinAlgDat.Core

let details = true
let summary = true

let mutable resultsList = []
// data for 'augmentRight()'

let mutable argList = []

// random dimensions (m = 9, n = 2)
let argA1 = array2D [[0.8888167492; 0.2978547803];
                  [-1.103140385; 0.5127398708];
                  [0.611899934; -0.5639385325];
                  [-0.5666824656; 1.235816267];
                  [-0.1578139933; 0.1468544138];
                  [-0.4798388465; -0.6872593649];
                  [-1.40309603; -2.158638382];
                  [-0.8957742116; 1.953257935];
                  [-1.302232117; -1.842281965]] |> Matrix
let argv1 = [|0.09184457645; -0.2439948392; 0.2489687667; 0.3918530324; 0.8652583985; 0.3132190602; -0.9289330822; -1.011586241; 0.7485116366|] |> Vector
let argAv1 = array2D [[0.8888167492; 0.2978547803; 0.09184457645];
                  [-1.103140385; 0.5127398708; -0.2439948392];
                  [0.611899934; -0.5639385325; 0.2489687667];
                  [-0.5666824656; 1.235816267; 0.3918530324];
                  [-0.1578139933; 0.1468544138; 0.8652583985];
                  [-0.4798388465; -0.6872593649; 0.3132190602];
                  [-1.40309603; -2.158638382; -0.9289330822];
                  [-0.8957742116; 1.953257935; -1.011586241];
                  [-1.302232117; -1.842281965; 0.7485116366]] |> Matrix
let arg1 = TestMatrixAugmentation argA1 argv1 argAv1
argList <- argList @ [arg1]

// random dimensions (m = 8, n = 7)
let argA2 = array2D [[-0.930767046; -0.2498822632; 0.4242767411; 0.9479155663; 0.7735619484; 0.6618930517; 0.2326338771];
                  [0.3629402542; -1.431886106; -1.915447423; 0.1622001609; 0.6138837341; -1.13122352; 1.461810252];
                  [0.8372653378; -0.5439011571; -1.548766673; -1.457560828; 1.444754711; -0.5633649987; 0.4041347501];
                  [-1.753578529; -0.2426617929; -0.858420912; -0.2119435849; -0.04905259787; -1.083991783; -0.498328049];
                  [0.1972842424; -0.03209712013; -0.8595957273; -1.047363838; -0.7349846022; -1.632416452; 0.8601474937];
                  [-2.83019297; -2.377672014; 2.877060306; -1.100332791; -0.005151818739; -0.7080708545; -1.879962159];
                  [0.3743081623; -0.8113066296; 0.01528345776; 0.4143050871; -0.564905806; -0.1404590458; 0.1398881001];
                  [-1.228028003; -0.1663859613; 2.755315011; -2.129814147; 1.953063259; 0.4251964834; -0.5273316665]] |> Matrix
let argv2 = [|-0.6239850551; 0.758178097; 0.6020086196; -0.3411376139; -0.1172541281; 0.8276492988; 0.8227739676; -0.6608218715|] |> Vector
let argAv2 = array2D [[-0.930767046; -0.2498822632; 0.4242767411; 0.9479155663; 0.7735619484; 0.6618930517; 0.2326338771; -0.6239850551];
                  [0.3629402542; -1.431886106; -1.915447423; 0.1622001609; 0.6138837341; -1.13122352; 1.461810252; 0.758178097];
                  [0.8372653378; -0.5439011571; -1.548766673; -1.457560828; 1.444754711; -0.5633649987; 0.4041347501; 0.6020086196];
                  [-1.753578529; -0.2426617929; -0.858420912; -0.2119435849; -0.04905259787; -1.083991783; -0.498328049; -0.3411376139];
                  [0.1972842424; -0.03209712013; -0.8595957273; -1.047363838; -0.7349846022; -1.632416452; 0.8601474937; -0.1172541281];
                  [-2.83019297; -2.377672014; 2.877060306; -1.100332791; -0.005151818739; -0.7080708545; -1.879962159; 0.8276492988];
                  [0.3743081623; -0.8113066296; 0.01528345776; 0.4143050871; -0.564905806; -0.1404590458; 0.1398881001; 0.8227739676];
                  [-1.228028003; -0.1663859613; 2.755315011; -2.129814147; 1.953063259; 0.4251964834; -0.5273316665; -0.6608218715]] |> Matrix
let arg2 = TestMatrixAugmentation argA2 argv2 argAv2
argList <- argList @ [arg2]

// random dimensions (m = 2, n = 9)
let argA3 = array2D [[-0.4493711979; 0.3350827296; 0.03098758961; 0.6478294635; -1.112346188; -2.197888428; -0.9873424131; 1.325108216; -1.189780819];
                  [-0.01620853345; -0.1214662046; 1.181210949; 0.5729428078; 0.5644148705; -1.863213106; 1.167629979; -1.157486104; 0.4708732539]] |> Matrix
let argv3 = [|-0.5629011693; 0.1977282029|] |> Vector
let argAv3 = array2D [[-0.4493711979; 0.3350827296; 0.03098758961; 0.6478294635; -1.112346188; -2.197888428; -0.9873424131; 1.325108216; -1.189780819; -0.5629011693];
                  [-0.01620853345; -0.1214662046; 1.181210949; 0.5729428078; 0.5644148705; -1.863213106; 1.167629979; -1.157486104; 0.4708732539; 0.1977282029]] |> Matrix
let arg3 = TestMatrixAugmentation argA3 argv3 argAv3
argList <- argList @ [arg3]

resultsList <- resultsList @ [argList]

// data for 'matrixVectorProduct()'

let mutable mvpList = []

// random dimensions (m = 8, n = 4)
let mvpA1 = array2D [[1.206358747; 0.872945552; -0.02383926178; 0.8304620249];
                  [-1.851549479; 1.361205349; -1.303481191; -0.1672053151];
                  [0.531527592; 0.1163946983; 0.2116944579; -0.8280381608];
                  [1.305455008; 1.208653171; -0.8008952267; -0.03177009344];
                  [-1.353179909; 1.07431454; 0.5443836773; 0.4420835894];
                  [2.129247863; 0.294683898; -0.7933132167; -0.5304649342];
                  [1.255425599; -2.1724122; -0.222114344; -0.4769927376];
                  [-0.1931196334; -0.3019734017; -0.4449129646; 0.5013442923]] |> Matrix
let mvpv1 = [|0.1270659322; 1.695493061; -0.3627631518; 0.1019553234|] |> Vector
let mvpAv1 = [|1.726678254; 2.528452835; 0.103667605; 2.502438067; 1.497140218; 1.003890448; -3.491845036; -0.3240199846|] |> Vector
let mvp1 = TestMatrixVectorProduct mvpA1 mvpv1 mvpAv1
mvpList <- mvpList @ [mvp1]

// random dimensions (m = 5, n = 7)
let mvpA2 = array2D [[-0.6353344244; -0.01632664151; -0.4716128249; -1.039134822; 0.60412711; 0.3059237924; -1.025920135];
                  [0.5604319856; 1.979024084; 0.8020937281; 0.606027146; 1.871767021; -0.6549904995; -0.7519820359];
                  [0.076195293; -0.7574334797; -1.121424721; -0.175507214; -0.2128135676; -0.5807306309; -0.6477325529];
                  [0.9600271789; 0.9523651328; -0.2822621582; 0.08108430529; 1.592586849; 0.4707348518; 0.3475707134];
                  [-0.6053662029; -0.07634457764; -0.3931994027; -0.2528404992; 0.04735233794; 0.1699589913; -1.171659139]] |> Matrix
let mvpv2 = [|-0.09660390085; 0.6864777502; -0.1014043204; -0.9567348585; -0.4381468174; 1.113472241; 1.250479433|] |> Vector
let mvpAv2 = [|-0.1147827562; -1.846487552; -1.609050897; 0.7730748836; -1.008792992|] |> Vector
let mvp2 = TestMatrixVectorProduct mvpA2 mvpv2 mvpAv2
mvpList <- mvpList @ [mvp2]

// random dimensions (m = 4, n = 2)
let mvpA3 = array2D [[-2.679329626; 0.0116305637];
                  [0.1867228482; -0.6308126023];
                  [-0.7343899265; 0.6225468143];
                  [1.055694916; 0.2555628438]] |> Matrix
let mvpv3 = [|0.4782172501; -0.3730886527|] |> Vector
let mvpAv3 = [|-1.285640877; 0.3246431109; -0.5834630833; 0.4095039228|] |> Vector
let mvp3 = TestMatrixVectorProduct mvpA3 mvpv3 mvpAv3
mvpList <- mvpList @ [mvp3]

resultsList <- resultsList @ [mvpList]

// data for 'matrixMatrixProduct()'

let mutable mmpList = []

// random dimensions (m = 5, n = 7)
let mmpA1 = array2D [[-1.910148028; -1.587668472; 0.1233743014; -0.0007744162442; 0.4776947676; -0.4600186901; -0.07947563959];
                  [-0.5584771652; 0.01577049197; 1.779397026; -0.2899248053; -0.2201369292; -1.385959539; -0.6952406073];
                  [2.373401179; -1.81401673; -0.175566124; -0.7474551838; 1.031421478; -0.200250534; 0.471593078];
                  [-1.908345111; 0.2117098737; -0.6352127739; -0.1690574508; 1.516880184; 1.491635709; -2.910809335];
                  [1.306461796; 0.5061777034; 1.459726412; -0.1050426182; -0.09703095365; -1.640149302; -0.6743483944]] |> Matrix
let mmpB1 = array2D [[1.829788392; 1.225072758; 0.5514379255; 0.262343852; 0.1706895952; 0.4239862854; -0.9078673958; -0.2904133225];
                  [-0.3897487195; 0.9408754667; 0.7296143548; 1.153732069; -0.1746086662; -0.01495297245; -0.3910995115; -1.30096167];
                  [0.5637744016; 0.04679307916; 0.8656539852; -0.8978199035; 2.230327882; 0.7769263076; -1.034931977; -0.9659255716];
                  [-1.051973435; -0.9414036568; 0.3248810484; 0.7719547016; -2.099788207; 0.6632766769; -1.446216423; 0.5244081382];
                  [-0.9947311472; -1.433183881; 0.06644311362; -1.981953449; -1.395599001; -1.003166365; -1.151516608; 1.186135224];
                  [-0.3894490116; 0.4362571658; -0.1267694525; -2.337202031; 0.5057683867; 0.4034542638; 0.5559745737; 0.6860728131];
                  [0.4654814201; -1.866550066; -0.9808428551; -1.533014137; 0.4908467248; 0.2566307994; -2.046409188; -1.091814824]] |> Matrix
let mmpAB1 = array2D [[-3.139023469; -4.564332155; -1.937156953; -2.194000238; -0.7103740736; -1.375996838; 1.585340969; 2.838428715];
                  [0.715246171; 0.6954259653; 1.992684471; 2.791677263; 3.744331364; 0.4363800498; -0.0157256561; -2.182038937];
                  [5.008674053; -0.5495624036; -0.7782049587; -4.188779108; 0.5905342317; -0.5932109963; -2.446697107; 2.019437725];
                  [-7.19938582; 1.900698652; 1.264073601; -1.846912221; -4.215744465; -3.084802946; 7.590926122; 6.804356081];
                  [3.548102533; 2.926194889; 3.182142326; 4.594532835; 2.585731125; 0.8733349478; -2.163018908; -3.007094078]] |> Matrix
let mmp1 = TestMatrixMatrixProduct mmpA1 mmpB1 mmpAB1
mmpList <- mmpList @ [mmp1]

let myMatrix1 = array2D [[3.0; 5.0]
                         [0.0; 1.0]
                         [4.0; 2.0]] |> Matrix
let myMatrix2 = array2D [[2.0; 1.0; 5.0]
                         [1.0; 2.0; 2.0]] |> Matrix
let myResult = array2D [[11.0; 13.0; 25.0]
                        [1.0; 2.0; 2.0]
                        [10.0; 8.0; 24.0]] |> Matrix

let mmpMyProduct = TestMatrixMatrixProduct myMatrix1 myMatrix2 myResult
mmpList <- mmpList @ [mmpMyProduct]

// random dimensions (m = 7, n = 5)
let mmpA2 = array2D [[1.040314538; 0.1295469529; -2.435533386; -0.8173292185; -0.2233962419];
                  [0.5591437558; 1.245311448; 0.7397687236; 0.5801726648; 1.293776875];
                  [0.260725844; -1.468917466; -0.5742422457; 0.2622819307; 0.3186432766];
                  [0.4062348263; -0.4913689936; 0.4008428982; 0.6488675236; 1.867118499];
                  [-1.118469346; 1.885632046; -1.237589026; -0.2063805112; 0.5585090678];
                  [-0.6662075779; -1.712419306; 1.07086893; -1.666708726; -1.802018165];
                  [-0.1684361337; 0.853269409; 0.1547482202; -0.1936215346; -2.297969966]] |> Matrix
let mmpB2 = array2D [[-0.6958398391; -0.722651063; 0.1665653938; 0.02232833933; 0.7666585089; 0.08579142727; 0.1876203813];
                  [-1.222172151; -0.3782927073; -0.1747892374; -0.5718205671; 0.248347203; -0.1108496378; -0.08565273929];
                  [0.7921176274; 0.6257883828; -0.6367842104; 1.513632356; -0.2628067806; -1.132322071; 1.161553196];
                  [-0.5208337392; 0.4210930919; 0.2601774908; 0.1643406469; 0.1206504874; -0.4293538033; 0.8636454999];
                  [0.4529475926; -0.1685595047; 0.3315842021; -1.198834015; 0.2805654963; 1.184526136; 0.9673371553]] |> Matrix
let mmpAB2 = array2D [[-2.486944063; -2.631435701; 1.414820862; -3.603856652; 1.308524858; 2.919002765; -3.566895617];
                  [-1.041236003; -0.3859910834; -0.01566224003; -1.035549845; 0.9765129623; 0.3556841481; 2.610105106];
                  [1.166702611; 0.06464758658; 0.8397441928; -0.3623096664; 0.1070456503; 1.100253725; 0.04247546091];
                  [1.14313258; 0.1016711691; 0.6862279688; -1.234955632; 0.6862042506; 1.568493203; 2.950429997];
                  [-2.146142256; -0.8605740441; 0.4036878961; -3.679947917; 0.06785265566; 1.846551503; -1.446855711];
                  [3.456557465; 1.401276444; -1.524727938; 4.471635813; -1.92413321; -2.498832247; -1.917054103];
                  [-1.74307408; 0.2015865834; -1.088085666; 2.465618689; -0.6259864219; -2.92313315; -2.315070721]] |> Matrix
let mmp2 = TestMatrixMatrixProduct mmpA2 mmpB2 mmpAB2
mmpList <- mmpList @ [mmp2]

// random dimensions (m = 4, n = 9)
let mmpA3 = array2D [[0.2470129903; 1.265400335; -0.8077930546; -1.120957507; -0.5816274803; 0.7525892234; 0.2952505348; -0.9989468377; 0.3039135263];
                  [0.864550274; 1.768637087; 1.459934285; 0.4558316095; 0.5578727314; 1.103857857; -0.106829213; 0.5006643329; 1.561145562];
                  [-0.3183973618; 0.6603375648; -1.543211415; -0.3920912202; 0.4465754917; -0.9072848913; 1.225163247; -1.822986779; 0.9605286923];
                  [0.6895861237; 0.0908275401; 0.03847511793; 1.305353445; -0.1986240789; -0.1368969213; 0.7652467476; 0.7457250057; -0.2858112385]] |> Matrix
let mmpB3 = array2D [[-1.189281929; 0.5654142473; -0.4975256922; -0.3746646325];
                  [1.839289166; 3.41368582; 0.8666642643; 0.2457260024];
                  [0.7437934843; 0.5010622045; -0.5518011083; -2.456394688];
                  [0.1164994954; 0.116314802; -0.7128169865; -0.9699146546];
                  [-0.2347651664; -0.5172799871; -0.4184523846; 0.5146743006];
                  [-1.023872276; 0.481676581; 0.3647371529; -0.2621403692];
                  [-0.4983344234; 0.06949446208; 0.891062063; -1.750613418];
                  [0.5243633973; -1.910442973; -0.4131938461; -0.7041053076];
                  [-0.5001590456; 0.7091851169; -2.124906726; -0.3371577323]] |> Matrix
let mmpAB3 = array2D [[-0.154712285; 6.732054378; 2.766498593; 2.87728111];
                  [1.637601885; 7.697290826; -3.478016073; -4.611707877];
                  [-0.823055265; 4.836332197; 1.147855331; 3.735200381];
                  [-0.1329354912; -0.6663046825; -0.2018196406; -3.431333544]] |> Matrix
let mmp3 = TestMatrixMatrixProduct mmpA3 mmpB3 mmpAB3
mmpList <- mmpList @ [mmp3]

resultsList <- resultsList @ [mmpList]

// data for 'transpose()'

let mutable tspList = []

// random dimensions (m = 1, n = 2)
let tspA1 = array2D [[-0.8399289844; 1.346843846]] |> Matrix
let tspAt1 = array2D [[-0.8399289844];
                  [1.346843846]] |> Matrix
let tsp1 = TestTranspose tspA1 tspAt1
tspList <- tspList @ [tsp1]

// random dimensions (m = 4, n = 6)
let tspA2 = array2D [[0.3145615149; -1.158261309; 0.2664094086; 0.7009454758; -0.7175714839; -2.034164653];
                  [0.4057435155; -0.858406644; -0.05915300971; -0.3899326213; 0.2677391353; -0.1187657661];
                  [0.5454637626; 0.6526465733; -0.03168155692; -1.001231545; -2.184239608; 1.068236073];
                  [0.87991497; -0.521358143; -0.6608140579; -1.195861689; 2.489622704; 0.7312607084]] |> Matrix
let tspAt2 = array2D [[0.3145615149; 0.4057435155; 0.5454637626; 0.87991497];
                  [-1.158261309; -0.858406644; 0.6526465733; -0.521358143];
                  [0.2664094086; -0.05915300971; -0.03168155692; -0.6608140579];
                  [0.7009454758; -0.3899326213; -1.001231545; -1.195861689];
                  [-0.7175714839; 0.2677391353; -2.184239608; 2.489622704];
                  [-2.034164653; -0.1187657661; 1.068236073; 0.7312607084]] |> Matrix
let tsp2 = TestTranspose tspA2 tspAt2
tspList <- tspList @ [tsp2]

// random dimensions (m = 6, n = 9)
let tspA3 = array2D [[-0.1786783921; -1.893591492; 0.8386194525; -0.4898702087; -0.5567865067; -2.081463713; -0.1878261272; 0.2480505241; -0.05410394142];
                  [-0.4754167388; 1.165314773; -0.4777922791; -0.5086802265; -1.907437472; -1.296711814; 0.01572594449; -0.140454206; 1.720671673];
                  [-1.242367051; 0.4629942564; -0.6265481983; 0.02842185513; -0.2043422367; -1.485371152; 0.4085505557; -0.003739190826; 0.2593895685];
                  [-0.06927706301; 1.710033095; -0.930501886; 0.2537579932; 0.476829554; 1.73625804; 0.7195920914; 0.4411406735; 0.4470842152];
                  [-0.571814714; 0.7517107936; -0.1843819098; -1.101169878; -0.8067133631; 0.9683631177; 1.640502315; -0.7739389826; -0.2052135337];
                  [-0.7172802112; -0.5182307; 0.6406869374; -0.9698393233; 0.9343851857; 0.9354681671; -0.7929989339; -1.078067104; 1.167793862]] |> Matrix
let tspAt3 = array2D [[-0.1786783921; -0.4754167388; -1.242367051; -0.06927706301; -0.571814714; -0.7172802112];
                  [-1.893591492; 1.165314773; 0.4629942564; 1.710033095; 0.7517107936; -0.5182307];
                  [0.8386194525; -0.4777922791; -0.6265481983; -0.930501886; -0.1843819098; 0.6406869374];
                  [-0.4898702087; -0.5086802265; 0.02842185513; 0.2537579932; -1.101169878; -0.9698393233];
                  [-0.5567865067; -1.907437472; -0.2043422367; 0.476829554; -0.8067133631; 0.9343851857];
                  [-2.081463713; -1.296711814; -1.485371152; 1.73625804; 0.9683631177; 0.9354681671];
                  [-0.1878261272; 0.01572594449; 0.4085505557; 0.7195920914; 1.640502315; -0.7929989339];
                  [0.2480505241; -0.140454206; -0.003739190826; 0.4411406735; -0.7739389826; -1.078067104];
                  [-0.05410394142; 1.720671673; 0.2593895685; 0.4470842152; -0.2052135337; 1.167793862]] |> Matrix
let tsp3 = TestTranspose tspA3 tspAt3
tspList <- tspList @ [tsp3]

resultsList <- resultsList @ [tspList]

// data for 'vectorNorm()'

let mutable vnList = []

// random dimensions (m = 1, n = 3)
let vnv1 = [|-0.4575894222|] |> Vector
let vnnv1 = 0.457589
let vn1 = TestVectorNorm vnv1 vnnv1
vnList <- vnList @ [vn1]

// random dimensions (m = 8, n = 3)
let vnv2 = [|-1.628358237; 0.4087422008; -0.2351580409; -1.48465492; 1.281190172; -1.571019861; -0.263344207; 0.6238254732|] |> Vector
let vnnv2 = 3.105830
let vn2 = TestVectorNorm vnv2 vnnv2
vnList <- vnList @ [vn2]

// random dimensions (m = 4, n = 3)
let vnv3 = [|0.8963568043; -0.4113905561; 0.496151622; -0.5677254195|] |> Vector
let vnnv3 = 1.241441
let vn3 = TestVectorNorm vnv3 vnnv3
vnList <- vnList @ [vn3]

resultsList <- resultsList @ [vnList]

let printSummaries llst =
    printfn "\nSummary\n=============================="
    let printSummary lst =
        let pass = List.filter (fun (x,y,z) -> y) lst
        match lst.Head with
        | x,y,z -> 
            let s = sprintf "Tests of %s passed/total:" x
            printfn "%-50s [%i/%i]" s (pass.Length) (lst.Length)
    List.map printSummary llst |> ignore
    printfn "------------------------------"

let printDetails llst =
    printfn "\nTest results\n=============================="
    let printDetail (lst : (string * bool * string) list) =
        List.map (fun (x,y,z) -> printf "%s" z) lst
    List.map printDetail llst |> ignore
    printfn ""

if details then printDetails resultsList
if summary then printSummaries resultsList
