// Generated test data for LinAlgDat Project B
// Seed: 324
// Date of creation: 27/04/2022

module testData
open ProjectB
open TestProjectB
open LinAlgDat.Core

let details = true
let summary = true

let mutable resultsList = []
// data for 'rowReplacement()'

let mutable rrList = []

// random dimensions (m = 9, n = 9)
let rrA1 = array2D [[-0.676560372; 1.589915845; -0.2865324891; 0.8657564482; -1.029904904; -0.7697012674; -0.9229428259; 0.5946261434; 0.4334231394];
                  [0.5265988417; 1.63265145; -0.8643201032; 0.1082162621; 0.5415031051; -0.4199076699; -0.6720948266; 1.066972142; 0.3613545176];
                  [0.2190543952; -1.532678364; -0.1128167915; -0.4902388814; -0.3436336256; 0.4344204888; -0.07737645318; -0.6572072468; -1.37467159];
                  [-0.7569639151; -0.9208326007; -0.7931109794; 0.2644388633; -0.7594947535; -0.5669871297; -0.5031962782; 0.09895707777; 0.529654348];
                  [-0.1232921494; -0.5283627798; -1.286685455; -1.143665687; 1.334151376; -0.1713418603; -1.231291516; 1.383668083; 1.286844379];
                  [-0.5073688252; 1.227558509; -1.651724315; -0.4364910768; 2.109369889; -2.013638466; 0.6511994283; -0.2699066986; -0.0095149518];
                  [0.138415775; 0.02074209225; 0.2196973819; -7.562064537e-05; -0.2489140723; 0.294590479; -0.9406185545; -0.7600020863; -0.01480061845];
                  [-0.01861308065; -0.2608078485; 1.371159075; 0.748786223; -0.02577380386; -1.350873639; 0.5987072335; 0.08703921362; -1.083516003];
                  [-0.1097121682; 1.216281298; 0.2767415975; 0.07440290958; -1.340269752; -0.5353774517; 0.8992311449; 0.8346950873; 0.3995459708]] |> Matrix
let rri1 = 1
let rrf1 = 0.713670701120827
let rrj1 = 3
let rrAv1 = array2D [[-0.676560372; 1.589915845; -0.2865324891; 0.8657564482; -1.029904904; -0.7697012674; -0.9229428259; 0.5946261434; 0.4334231394];
                  [-0.01362412633; 0.9754802027; -1.430340172; 0.2969385311; -0.0005260480969; -0.8245497723; -1.031211267; 1.137594909; 0.7393533076];
                  [0.2190543952; -1.532678364; -0.1128167915; -0.4902388814; -0.3436336256; 0.4344204888; -0.07737645318; -0.6572072468; -1.37467159];
                  [-0.7569639151; -0.9208326007; -0.7931109794; 0.2644388633; -0.7594947535; -0.5669871297; -0.5031962782; 0.09895707777; 0.529654348];
                  [-0.1232921494; -0.5283627798; -1.286685455; -1.143665687; 1.334151376; -0.1713418603; -1.231291516; 1.383668083; 1.286844379];
                  [-0.5073688252; 1.227558509; -1.651724315; -0.4364910768; 2.109369889; -2.013638466; 0.6511994283; -0.2699066986; -0.0095149518];
                  [0.138415775; 0.02074209225; 0.2196973819; -7.562064537e-05; -0.2489140723; 0.294590479; -0.9406185545; -0.7600020863; -0.01480061845];
                  [-0.01861308065; -0.2608078485; 1.371159075; 0.748786223; -0.02577380386; -1.350873639; 0.5987072335; 0.08703921362; -1.083516003];
                  [-0.1097121682; 1.216281298; 0.2767415975; 0.07440290958; -1.340269752; -0.5353774517; 0.8992311449; 0.8346950873; 0.3995459708]] |> Matrix
let rr1 = TestRowReplacement rrA1 rri1 rrf1 rrj1 rrAv1
rrList <- rrList @ [rr1]

// random dimensions (m = 7, n = 2)
let rrA2 = array2D [[-0.09793484674; 1.097916217];
                  [0.7113484027; 0.1097350603];
                  [0.4350663459; 0.3691806209];
                  [-0.2460167376; -1.099366703];
                  [-1.307175405; -0.5046262645];
                  [0.5511391718; -0.6367756442];
                  [-0.4831014453; 1.963831014]] |> Matrix
let rri2 = 5
let rrf2 = 0.06176068729803
let rrj2 = 4
let rrAv2 = array2D [[-0.09793484674; 1.097916217];
                  [0.7113484027; 0.1097350603];
                  [0.4350663459; 0.3691806209];
                  [-0.2460167376; -1.099366703];
                  [-1.307175405; -0.5046262645];
                  [0.4704071204; -0.6679417091];
                  [-0.4831014453; 1.963831014]] |> Matrix
let rr2 = TestRowReplacement rrA2 rri2 rrf2 rrj2 rrAv2
rrList <- rrList @ [rr2]

// random dimensions (m = 9, n = 5)
let rrA3 = array2D [[-0.05511393596; 0.683107302; -1.193962166; -0.8796571126; -0.6075965721];
                  [-1.959733519; -0.5301004913; 1.853557686; -2.525192695; 0.02577012152];
                  [0.9974865876; -1.5214881; 0.4371568079; -0.09119099991; -0.4360049216];
                  [-2.377946341; 1.558309158; 1.087433507; -1.109323493; 0.2418871154];
                  [1.36627319; -1.2190235; -0.05751042256; -0.6276048515; 0.5247095937];
                  [0.02589310827; 0.06291835157; -1.90356601; 0.3446372992; 1.503710383];
                  [0.6105547643; -0.5080541714; 0.343517201; 0.400752689; 0.07914032948];
                  [0.2421474247; -0.7200595791; -0.7320621693; 0.5929979205; -0.7103260267];
                  [-0.4536432577; -0.4911972107; 0.3621031937; 0.09683513564; 1.417755998]] |> Matrix
let rri3 = 2
let rrf3 = 0.0322191184536643
let rrj3 = 6
let rrAv3 = array2D [[-0.05511393596; 0.683107302; -1.193962166; -0.8796571126; -0.6075965721];
                  [-1.959733519; -0.5301004913; 1.853557686; -2.525192695; 0.02577012152];
                  [1.017158124; -1.537857158; 0.4482246292; -0.07827910156; -0.4334550899];
                  [-2.377946341; 1.558309158; 1.087433507; -1.109323493; 0.2418871154];
                  [1.36627319; -1.2190235; -0.05751042256; -0.6276048515; 0.5247095937];
                  [0.02589310827; 0.06291835157; -1.90356601; 0.3446372992; 1.503710383];
                  [0.6105547643; -0.5080541714; 0.343517201; 0.400752689; 0.07914032948];
                  [0.2421474247; -0.7200595791; -0.7320621693; 0.5929979205; -0.7103260267];
                  [-0.4536432577; -0.4911972107; 0.3621031937; 0.09683513564; 1.417755998]] |> Matrix
let rr3 = TestRowReplacement rrA3 rri3 rrf3 rrj3 rrAv3
rrList <- rrList @ [rr3]

resultsList <- resultsList @ [rrList]

// data for 'rowInterchange()'

let mutable riList = []

// random dimensions (m = 5, n = 2)
let riA1 = array2D [[-0.670236433; 0.1161359715];
                  [0.7952974024; -0.2349355126];
                  [-1.963604218; 0.03386854385];
                  [-1.396900384; -0.4763689535];
                  [-0.02798753601; 1.231065644]] |> Matrix
let rii1 = 3
let rij1 = 1
let riAv1 = array2D [[-0.670236433; 0.1161359715];
                  [-1.396900384; -0.4763689535];
                  [-1.963604218; 0.03386854385];
                  [0.7952974024; -0.2349355126];
                  [-0.02798753601; 1.231065644]] |> Matrix
let ri1 = TestRowInterchange riA1 rii1 rij1 riAv1
riList <- riList @ [ri1]

// random dimensions (m = 8, n = 8)
let riA2 = array2D [[-0.2037650721; -0.1836013993; -0.2448575598; 0.4406071535; -1.208721393; -0.8687545229; 0.6584826229; -0.03488683215];
                  [-0.0838403981; 0.2648110195; -0.5998630809; 0.4366268441; 0.909991477; 1.773571253; 0.5449229412; 0.1411617989];
                  [-0.3800659405; 0.07999508715; -0.24954665; 1.073846808; 0.782499377; 2.804681348; -0.0502634478; 0.8147227478];
                  [2.011925896; 0.9096885457; 0.8262642219; -0.3756849338; -0.9943900797; 0.1710901609; 0.7665410324; -0.4605266806];
                  [-0.6859208551; -0.8517222785; -1.494748049; -0.7168681057; 0.2283884761; 0.9585065604; 1.574883714; 0.7479997885];
                  [0.3702465171; 0.8029611186; -0.4735525694; -0.5951422495; -0.9273227347; -0.05092766684; 0.3460863955; 0.4205836822];
                  [-0.7947103856; 1.394990529; 0.7663366886; 0.007670497337; -0.07118460619; 0.9146329498; 1.495544432; -0.05806350579];
                  [0.1621078586; 0.6583283776; -0.02731922978; 0.6197387792; -0.6033687185; -0.872497432; 1.064121108; 0.2637181784]] |> Matrix
let rii2 = 2
let rij2 = 5
let riAv2 = array2D [[-0.2037650721; -0.1836013993; -0.2448575598; 0.4406071535; -1.208721393; -0.8687545229; 0.6584826229; -0.03488683215];
                  [-0.0838403981; 0.2648110195; -0.5998630809; 0.4366268441; 0.909991477; 1.773571253; 0.5449229412; 0.1411617989];
                  [0.3702465171; 0.8029611186; -0.4735525694; -0.5951422495; -0.9273227347; -0.05092766684; 0.3460863955; 0.4205836822];
                  [2.011925896; 0.9096885457; 0.8262642219; -0.3756849338; -0.9943900797; 0.1710901609; 0.7665410324; -0.4605266806];
                  [-0.6859208551; -0.8517222785; -1.494748049; -0.7168681057; 0.2283884761; 0.9585065604; 1.574883714; 0.7479997885];
                  [-0.3800659405; 0.07999508715; -0.24954665; 1.073846808; 0.782499377; 2.804681348; -0.0502634478; 0.8147227478];
                  [-0.7947103856; 1.394990529; 0.7663366886; 0.007670497337; -0.07118460619; 0.9146329498; 1.495544432; -0.05806350579];
                  [0.1621078586; 0.6583283776; -0.02731922978; 0.6197387792; -0.6033687185; -0.872497432; 1.064121108; 0.2637181784]] |> Matrix
let ri2 = TestRowInterchange riA2 rii2 rij2 riAv2
riList <- riList @ [ri2]

// random dimensions (m = 3, n = 5)
let riA3 = array2D [[1.596206265; 0.4049059832; 1.030931041; -0.6618413036; -1.580762911];
                  [-2.013432557; -0.8805728775; 0.325351289; -0.8653232946; 0.631015496];
                  [1.461433508; 0.6400002761; -0.4393801025; 0.5850364738; -0.6909866817]] |> Matrix
let rii3 = 1
let rij3 = 0
let riAv3 = array2D [[-2.013432557; -0.8805728775; 0.325351289; -0.8653232946; 0.631015496];
                  [1.596206265; 0.4049059832; 1.030931041; -0.6618413036; -1.580762911];
                  [1.461433508; 0.6400002761; -0.4393801025; 0.5850364738; -0.6909866817]] |> Matrix
let ri3 = TestRowInterchange riA3 rii3 rij3 riAv3
riList <- riList @ [ri3]

resultsList <- resultsList @ [riList]

// data for 'rowScaling()'

let mutable rsList = []

// random dimensions (m = 5, n = 2)
let rsA1 = array2D [[-1.050253047; -0.6396997208];
                  [-0.7524920882; -2.491528573];
                  [0.8593344016; 0.1426788252];
                  [-0.8648610079; -0.9633556514];
                  [-1.693690513; -0.7379473957]] |> Matrix
let rsi1 = 0
let rsf1 = 0.80071286428753
let rsAv1 = array2D [[-0.8409511258; -0.5122157957];
                  [-0.7524920882; -2.491528573];
                  [0.8593344016; 0.1426788252];
                  [-0.8648610079; -0.9633556514];
                  [-1.693690513; -0.7379473957]] |> Matrix
let rs1 = TestRowScaling rsA1 rsi1 rsf1 rsAv1
rsList <- rsList @ [rs1]

// random dimensions (m = 8, n = 6)
let rsA2 = array2D [[-0.5125757538; 0.6309857609; -0.01241303383; 0.2923714645; -0.8385621361; -1.104897768];
                  [0.5616937117; -0.0106233499; 0.9102762078; 0.8015313423; -1.487297027; -0.9354456857];
                  [-0.2178117423; -0.5606524342; -0.7834507888; -0.2912860361; 0.6608877624; 1.403255688];
                  [0.7597591094; 0.4255313582; -1.222417334; 0.6058321992; -1.578946217; 0.07694923088];
                  [0.0968438576; -0.8756234854; 2.000710496; -0.7649305508; 1.198131419; 0.3164232172];
                  [0.5649258764; -1.043633742; 0.173429724; 0.6981903139; -1.322629366; -0.8804537232];
                  [1.750788129; -0.9202666447; -0.7310943197; 0.6278008784; -0.6267417609; -1.10504654];
                  [-1.003360652; -1.146450834; 0.9261027205; -1.772483714; 0.9584510009; 1.003280284]] |> Matrix
let rsi2 = 0
let rsf2 = 0.776571509789942
let rsAv2 = array2D [[-0.398051727; 0.490005565; -0.009639608421; 0.2270473496; -0.6512034641; -0.8580321281];
                  [0.5616937117; -0.0106233499; 0.9102762078; 0.8015313423; -1.487297027; -0.9354456857];
                  [-0.2178117423; -0.5606524342; -0.7834507888; -0.2912860361; 0.6608877624; 1.403255688];
                  [0.7597591094; 0.4255313582; -1.222417334; 0.6058321992; -1.578946217; 0.07694923088];
                  [0.0968438576; -0.8756234854; 2.000710496; -0.7649305508; 1.198131419; 0.3164232172];
                  [0.5649258764; -1.043633742; 0.173429724; 0.6981903139; -1.322629366; -0.8804537232];
                  [1.750788129; -0.9202666447; -0.7310943197; 0.6278008784; -0.6267417609; -1.10504654];
                  [-1.003360652; -1.146450834; 0.9261027205; -1.772483714; 0.9584510009; 1.003280284]] |> Matrix
let rs2 = TestRowScaling rsA2 rsi2 rsf2 rsAv2
rsList <- rsList @ [rs2]

// random dimensions (m = 8, n = 5)
let rsA3 = array2D [[0.7313798492; -0.175311494; -0.2616555244; 0.2741093467; 1.477631344];
                  [1.261007718; -0.4115023799; -0.4533660059; 0.656553214; -0.2348245168];
                  [-0.5374286699; 1.112424602; 1.473177411; 0.2645740317; -0.1464936248];
                  [-0.5336698464; -1.679727732; 0.5982349652; 0.8032746424; 0.3101844473];
                  [0.4643333255; -1.48267974; 0.3782566673; -0.06874319921; -0.03236031156];
                  [-1.560891623; -0.1045460632; 0.1493880971; 0.05508677394; -0.7024744698];
                  [-1.960158103; 0.0388753105; 1.16202222; 1.613199719; 0.2921537436];
                  [0.6900982863; -2.100443492; -0.794578746; 1.253498264; 1.05149395]] |> Matrix
let rsi3 = 1
let rsf3 = 0.828760346318018
let rsAv3 = array2D [[0.7313798492; -0.175311494; -0.2616555244; 0.2741093467; 1.477631344];
                  [1.045073193; -0.3410368549; -0.3757317681; 0.544125269; -0.1946132479];
                  [-0.5374286699; 1.112424602; 1.473177411; 0.2645740317; -0.1464936248];
                  [-0.5336698464; -1.679727732; 0.5982349652; 0.8032746424; 0.3101844473];
                  [0.4643333255; -1.48267974; 0.3782566673; -0.06874319921; -0.03236031156];
                  [-1.560891623; -0.1045460632; 0.1493880971; 0.05508677394; -0.7024744698];
                  [-1.960158103; 0.0388753105; 1.16202222; 1.613199719; 0.2921537436];
                  [0.6900982863; -2.100443492; -0.794578746; 1.253498264; 1.05149395]] |> Matrix
let rs3 = TestRowScaling rsA3 rsi3 rsf3 rsAv3
rsList <- rsList @ [rs3]

resultsList <- resultsList @ [rsList]

// data for 'forwardReduction()'

let mutable frList = []

// random dimensions (m = 9, n = 3)
let frA1 = array2D [[-0.02843074448; 1.745357873; -1.014003354];
                  [-0.9273024076; -0.1600804515; -1.135662393];
                  [-0.04766480908; -0.2171178152; 0.1360701213];
                  [0.4384800117; -1.665974559; -0.6328432112];
                  [-1.931546183; -0.1202093394; -0.1947156386];
                  [0.2187986675; -0.9016673078; -0.7050448052];
                  [0.9304231576; -0.7345507295; -0.9997776703];
                  [-0.2236963592; -0.9375208095; 0.6632811911];
                  [-0.5879444935; 0.4255517402; -0.8643787205]] |> Matrix
let frAv1 = array2D [[-0.02843074448; 1.745357873; -1.014003354];
                  [1.110223025e-16; -57.08699485; 31.93725808];
                  [-6.112968167e-18; 0.0; 0.07758199683];
                  [-1.198407839e-16; 0.0; 0.0];
                  [-2.72438533e-16; 0.0; 0.0];
                  [-9.370922839e-17; 0.0; 0.0];
                  [-9.836523219e-17; 0.0; 0.0];
                  [5.69354809e-18; 0.0; 0.0];
                  [-5.750644225e-17; 0.0; 0.0]] |> Matrix
let fr1 = TestForwardReduction frA1 frAv1
frList <- frList @ [fr1]

// random dimensions (m = 7, n = 5)
let frA2 = array2D [[0.797535613; 1.140420279; 1.20315897; -0.5276373442; -0.7199071798];
                  [-1.226819256; 1.366535443; 0.4699863172; -0.6569810333; 0.2852131184];
                  [1.620129241; 1.961504056; 1.191490454; -1.371427017; -0.5148135086];
                  [0.6710234124; -1.140083589; -0.9924903143; 0.3245495883; -0.8339919575];
                  [1.22672421; 2.262462116; 0.534120966; 0.05648938188; 1.276929204];
                  [-0.1807047882; 1.412082159; 0.8491844261; 0.407222959; 0.6427863791];
                  [-0.7095336002; -0.7670838195; 0.4367549978; -0.4973557465; -0.5512351395]] |> Matrix
let frAv2 = array2D [[0.797535613; 1.140420279; 1.20315897; -0.5276373442; -0.7199071798];
                  [0.0; 3.120801377; 2.320760838; -1.468625859; -0.8221932171];
                  [2.220446049e-16; 0.0; -0.9885120644; -0.4667136076; 0.8540488412];
                  [-9.960804242e-17; 0.0; 0.0; -0.01020255299; -1.164556544];
                  [-1.900207705e-14; 0.0; 0.0; 0.0; -216.656429];
                  [1.818449696e-16; 0.0; 0.0; 0.0; 0.0];
                  [-7.010573236e-17; 0.0; 0.0; 2.220446049e-16; 0.0]] |> Matrix
let fr2 = TestForwardReduction frA2 frAv2
frList <- frList @ [fr2]

// random dimensions (m = 9, n = 7)
let frA3 = array2D [[-0.4594898305; -0.09262544427; -1.756049996; -1.143432203; -1.454468023; -0.01183404215; 0.8736022114];
                  [1.010974284; -0.0782037622; 0.5604623542; 0.5588285581; 0.4218222882; -1.001379672; -0.248983836];
                  [0.9092505751; 0.6932623237; 0.01429615665; -0.9071135477; 0.5436511185; -1.599304479; 0.3867543085];
                  [0.2501540443; -0.1933091718; -1.619650019; 0.697039591; -1.81758695; -1.488239884; -0.7858706078];
                  [-0.6951462419; 1.65387183; -1.111192848; 1.606890083; -0.009401173195; -0.8472113485; 0.5819299789];
                  [0.1288256122; 0.2543425045; -2.00537384; -0.6992192493; 1.38857818; -1.341794519; 0.4459387378];
                  [-1.712011781; -0.04334726985; 1.254209264; -0.3678688918; -0.01318823711; 0.3772974582; -1.351677328];
                  [0.01495067958; -0.007619939981; -1.373060563; -1.357079951; 1.508796494; 1.872498951; 0.630414363];
                  [1.057867541; 1.446866658; 0.1574176098; -0.00827004198; -0.7595335033; 0.5082931707; -0.2888714523]] |> Matrix
let frAv3 = array2D [[-0.4594898305; -0.09262544427; -1.756049996; -1.143432203; -1.454468023; -0.01183404215; 0.8736022114];
                  [0.0; -0.281999224; -3.303217035; -1.956962817; -2.778313319; -1.027417054; 1.673124797];
                  [0.0; 0.0; -9.434221102; -6.708775352; -7.35884212; -3.480722155; 5.141171453];
                  [0.0; 0.0; 0.0; 1.56732184; -0.4259810106; -0.7097344309; -1.604143943];
                  [0.0; 0.0; 0.0; 0.0; 0.9879945892; 1.960016675; 4.137441758];
                  [0.0; 0.0; 0.0; 0.0; 0.0; -5.848012667; -12.47803404];
                  [0.0; 0.0; 0.0; 0.0; 0.0; -5.551115123e-17; 4.182605284];
                  [0.0; 0.0; 0.0; 0.0; 0.0; -6.81007519e-17; 0.0];
                  [0.0; 0.0; 0.0; 0.0; 0.0; -9.000964806e-17; 0.0]] |> Matrix
let fr3 = TestForwardReduction frA3 frAv3
frList <- frList @ [fr3]

// edge case data for 'forwardReduction()'

// dimensions (m = 3, n = 3)
let ecFrA0 = array2D [[0.0; 2.0; 2.0];
                  [1.0; 0.0; 0.0];
                  [0.0; 4.0; 4.0]] |> Matrix
let ecFrAv0 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 2.0; 2.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecFr0 = TestForwardReduction ecFrA0 ecFrAv0
frList <- frList @ [ecFr0]

// dimensions (m = 3, n = 3)
let ecFrA1 = array2D [[5.0; 5.0; 0.0];
                  [1.0; 1.0; 0.0];
                  [0.0; 1.0; 0.0]] |> Matrix
let ecFrAv1 = array2D [[5.0; 5.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecFr1 = TestForwardReduction ecFrA1 ecFrAv1
frList <- frList @ [ecFr1]

// dimensions (m = 4, n = 5)
let ecFrA2 = array2D [[0.0; 0.0; 0.0; 0.0; 1.0];
                  [0.0; 0.0; 4.0; 0.0; 1.0];
                  [0.0; 0.0; 1.0; 0.0; 0.0];
                  [0.0; 1.0; 0.0; 0.0; 0.0]] |> Matrix
let ecFrAv2 = array2D [[0.0; 1.0; 0.0; 0.0; 0.0];
                  [0.0; 0.0; 4.0; 0.0; 1.0];
                  [0.0; 0.0; 0.0; 0.0; -0.25];
                  [0.0; 0.0; 0.0; 0.0; 0.0]] |> Matrix
let ecFr2 = TestForwardReduction ecFrA2 ecFrAv2
frList <- frList @ [ecFr2]

// dimensions (m = 3, n = 3)
let ecFrA3 = array2D [[1.0; 0.0; 0.0];
                  [2.0; 1.0; 0.0];
                  [3.0; 2.0; 1.0]] |> Matrix
let ecFrAv3 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 1.0]] |> Matrix
let ecFr3 = TestForwardReduction ecFrA3 ecFrAv3
frList <- frList @ [ecFr3]

// dimensions (m = 3, n = 3)
let ecFrA4 = array2D [[1.0; 0.0; 0.0];
                  [2.0; 1.0; 0.0];
                  [3.0; 2.0; 0.0]] |> Matrix
let ecFrAv4 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecFr4 = TestForwardReduction ecFrA4 ecFrAv4
frList <- frList @ [ecFr4]

resultsList <- resultsList @ [frList]

// data for 'backwardReduction()'

let mutable brList = []

// random dimensions (m = 2, n = 6)
let brA1 = array2D [[-0.4043768828; 0.2949450237; 0.908231418; -0.04724583491; 0.1785778812; 0.1945670798];
                  [-3.469446952e-18; 0.8651238352; 0.372221485; -0.8251332253; 1.646150344; 0.7817562371]] |> Matrix
let brAv1 = array2D [[1.0; 0.0; -1.932184277; -0.5788294935; 0.9462485147; 0.1779418911];
                  [-4.010347202e-18; 1.0; 0.4302522597; -0.9537746987; 1.902791574; 0.9036350697]] |> Matrix
let br1 = TestBackwardReduction brA1 brAv1
brList <- brList @ [br1]

// random dimensions (m = 6, n = 8)
let brA2 = array2D [[-0.4761436468; -0.1826728061; -0.274549934; -0.1656773229; -0.7072080269; 0.07931875383; -0.2543602189; -0.5306652047];
                  [0.0; 0.9743955411; -0.1549853338; 1.123879816; 1.137686608; 0.4929042654; 1.473939152; 1.04350514];
                  [0.0; 0.0; -1.188343606; 1.153492854; 1.180045978; 0.2048832224; 2.365346445; 0.1743712158];
                  [0.0; 0.0; 0.0; 0.8611449915; 0.08636250937; -0.08370210466; 1.67079398; -2.525958438];
                  [0.0; 0.0; 0.0; -2.220446049e-16; -0.5903378877; 1.716232247; -1.666794118; 7.950200089];
                  [0.0; 0.0; 0.0; -7.342818599e-16; 0.0; 5.568314297; -3.278735151; 25.99588197]] |> Matrix
let brAv2 = array2D [[1.0; 0.0; 0.0; 0.0; 2.564363665e-16; 5.808958794e-16; -1.710527563; 3.097736121];
                  [0.0; 1.0; 0.0; 0.0; 1.820593111e-16; 4.114252884e-16; -1.414311453; 1.195392916];
                  [0.0; 0.0; 1.0; 0.0; -1.712093053e-16; -3.758892456e-16; 0.7314320586; -1.654382989];
                  [0.0; 0.0; 0.0; 1.0; 1.611550662e-17; 2.160595752e-17; 1.771484074; -2.490028967];
                  [0.0; 0.0; 0.0; -7.235383468e-18; 1.0; -3.76131381e-16; 1.111638198; 0.1051835815];
                  [0.0; 0.0; 0.0; -1.318678905e-16; 0.0; 1.0; -0.5888200586; 4.668537116]] |> Matrix
let br2 = TestBackwardReduction brA2 brAv2
brList <- brList @ [br2]

// random dimensions (m = 2, n = 2)
let brA3 = array2D [[0.3486422873; 1.132510234];
                  [-5.551115123e-17; -1.9469917]] |> Matrix
let brAv3 = array2D [[1.0; 0.0];
                  [2.851124185e-17; 1.0]] |> Matrix
let br3 = TestBackwardReduction brA3 brAv3
brList <- brList @ [br3]

// edge case data for 'backwardReduction()'

// dimensions (m = 3, n = 3)
let ecBrA0 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 2.0; 2.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecBrAv0 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 1.0; 1.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecBr0 = TestBackwardReduction ecBrA0 ecBrAv0
brList <- brList @ [ecBr0]

// dimensions (m = 3, n = 3)
let ecBrA1 = array2D [[5.0; 5.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecBrAv1 = array2D [[1.0; 0.0; 0.0];
                  [0.0; 1.0; 0.0];
                  [0.0; 0.0; 0.0]] |> Matrix
let ecBr1 = TestBackwardReduction ecBrA1 ecBrAv1
brList <- brList @ [ecBr1]

// dimensions (m = 4, n = 5)
let ecBrA2 = array2D [[0.0; 1.0; 0.0; 0.0; 0.0];
                  [0.0; 0.0; 4.0; 0.0; 1.0];
                  [0.0; 0.0; 0.0; 0.0; -0.25];
                  [0.0; 0.0; 0.0; 0.0; 0.0]] |> Matrix
let ecBrAv2 = array2D [[0.0; 1.0; 0.0; 0.0; 0.0];
                  [0.0; 0.0; 1.0; 0.0; 0.0];
                  [0.0; 0.0; 0.0; 0.0; 1.0];
                  [0.0; 0.0; 0.0; 0.0; 0.0]] |> Matrix
let ecBr2 = TestBackwardReduction ecBrA2 ecBrAv2
brList <- brList @ [ecBr2]

resultsList <- resultsList @ [brList]

// data for 'gaussElimination()'

let mutable gelList = []

// random dimensions (m = 7, n = 7)
let gelA1 = array2D [[-0.3966495307; 0.09964815403; 0.4354319587; -0.1430804742; -1.806866787; 0.3203203636; -1.164337641];
                  [-0.4469451038; -0.2922428769; -0.7013939936; 0.5407494821; 0.3100344394; 1.277347702; 0.2633632012];
                  [-2.459445914; -0.1330089943; 1.807644852; 0.281960912; -1.365022626; -0.1201063093; 0.1771344264];
                  [-0.9907247398; 0.287973395; -0.05306891247; 3.742974744; 0.6975160547; -1.022515869; -0.301928144];
                  [-0.5049293011; -1.450836086; -0.001540052052; -0.5064468698; -2.097541214; 1.390605347; 1.094177368];
                  [-0.5987757005; 0.03134757239; -0.6723548195; -0.9035814507; -0.5649035177; -1.00493551; -0.001890536799];
                  [-0.5013204224; 0.9146785388; 0.2015573654; 0.3290206602; 1.065584436; -0.8400720844; -1.076130142]] |> Matrix
let gelv1 = [|-1.062444337; -1.129474059; 1.503641686; -0.167723668; 2.076575607; 1.016801291; 0.714059485|] |> Vector
let gelAv1 = [|-1.099312962; -10.93485159; 1.358978282; -1.080896918; 3.142143158; -2.392987469; -4.542248047|] |> Vector
let gel1 = TestGaussElimination gelA1 gelv1 gelAv1
gelList <- gelList @ [gel1]

// random dimensions (m = 2, n = 2)
let gelA2 = array2D [[-0.06405050459; -1.860754642];
                  [-1.722991123; 0.0973118085]] |> Matrix
let gelv2 = [|-0.3243597765; 0.2728219223|] |> Vector
let gelAv2 = [|-0.1482087992; 0.1794178649|] |> Vector
let gel2 = TestGaussElimination gelA2 gelv2 gelAv2
gelList <- gelList @ [gel2]

// random dimensions (m = 5, n = 5)
let gelA3 = array2D [[-0.5135851005; -1.678600099; -0.7356822754; 0.6788551752; 0.003291109075];
                  [0.4150120545; 0.776337162; 0.01684123502; 0.4748429814; 0.9593573256];
                  [0.08491700829; 1.185370309; -1.850781964; -2.267314312; -0.8666762745];
                  [0.7109466288; -1.326866818; 0.2644700738; 2.057683584; -0.03557830117];
                  [1.80360124; -1.153736782; 0.3277520246; 0.07035789482; 1.437198287]] |> Matrix
let gelv3 = [|-0.6256661108; 0.5965946526; -1.369807906; 0.1343559065; 0.4758682031|] |> Vector
let gelAv3 = [|-0.009113780918; 0.2048811904; 0.5204742607; 0.1402582576; 0.3814574729|] |> Vector
let gel3 = TestGaussElimination gelA3 gelv3 gelAv3
gelList <- gelList @ [gel3]

resultsList <- resultsList @ [gelList]

let printSummaries llst =
    printfn "\nSummary\n=============================="
    let printSummary lst =
        let pass = List.filter (fun (x,y,z) -> y) lst
        match lst.Head with
        | x,y,z -> 
            let s = sprintf "Tests of %s passed/total:" x
            printfn "%-50s [%i/%i]" s (pass.Length) (lst.Length)
    List.map printSummary llst |> ignore
    printfn "------------------------------"

let printDetails llst =
    printfn "\nTest results\n=============================="
    let printDetail (lst : (string * bool * string) list) =
        List.map (fun (x,y,z) -> printf "%s" z) lst
    List.map printDetail llst |> ignore
    printfn ""

if details then printDetails resultsList
if summary then printSummaries resultsList
